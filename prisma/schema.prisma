// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================================================================
// ENUMS
// ================================================================

// Removed enums - using string fields instead

// ================================================================
// USER MODEL
// ================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  password  String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  userRoles            UserRole[]
  createdCompanies     Company[]    @relation("CompanyCreatedBy")
  modifiedCompanies    Company[]    @relation("CompanyModifiedBy")
  createdPOCs          POC[]        @relation("POCCreatedBy")
  modifiedPOCs         POC[]        @relation("POCModifiedBy")
  createdJobPostings   JobPosting[] @relation("JobPostingCreatedBy")
  modifiedJobPostings  JobPosting[] @relation("JobPostingModifiedBy")
  createdJobs          Job[]        @relation("UserCreatedJobs")
  modifiedJobs         Job[]        @relation("UserModifiedJobs")
  jobActivities        JobActivity[] @relation("UserJobActivities")
  createdCandidates    Candidate[]  @relation("UserCreatedCandidates")
  modifiedCandidates   Candidate[]  @relation("UserModifiedCandidates")
  candidateActivities  CandidateActivity[] @relation("UserCandidateActivities")

  // Database indexes for performance optimization
  @@index([email])
  @@index([isActive])
  @@index([createdAt])
  @@index([firstName, lastName])
  @@map("users")
}

// ================================================================
// ROLE MODEL
// ================================================================

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  hierarchy   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]
  
  @@map("roles")
}

// ================================================================
// PERMISSION MODEL
// ================================================================

model Permission {
  id       String @id @default(cuid())
  name     String @unique
  resource String
  action   String
  isActive Boolean @default(true)
  
  // Relations
  rolePermissions RolePermission[]
  
  @@map("permissions")
}

// ================================================================
// USERROLE MODEL
// ================================================================

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

// ================================================================
// ROLEPERMISSION MODEL
// ================================================================

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  
  // Relations
  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// ================================================================ma and
// COMPANY MODEL
// ================================================================

model Company {
  id               String   @id @default(cuid())
  name             String
  website          String?
  industry         String
  location         String
  size             String   // Changed from CompanySize enum to string
  description      String?
  agreementStatus  String   @map("agreement_status") // Changed from AgreementStatus enum to string
  fee              Decimal? @db.Decimal(10, 2)
  paymentTerms     String?  @map("payment_terms")
  warranty         String?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  
  // Foreign Keys
  createdById      String?  @map("created_by_id")
  modifiedById     String?  @map("modified_by_id")

  // Relations
  createdBy        User?    @relation("CompanyCreatedBy", fields: [createdById], references: [id])
  modifiedBy       User?    @relation("CompanyModifiedBy", fields: [modifiedById], references: [id])
  pocs             POC[]
  jobPostings      JobPosting[]
  jobs             Job[]

  // Database indexes for performance optimization
  @@index([name])
  @@index([industry])
  @@index([location])
  @@index([size])
  @@index([agreementStatus])
  @@index([createdAt])
  @@index([createdById])
  @@map("companies")
}

// ================================================================
// POC MODEL
// ================================================================

model POC {
  id           String   @id @default(cuid())
  companyId    String   @map("company_id")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  email        String   @unique
  designation  String
  location     String
  phone        String?
  mobile       String?
  department   String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Foreign Keys
  createdById  String?  @map("created_by_id")
  modifiedById String?  @map("modified_by_id")

  // Relations
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy    User?    @relation("POCCreatedBy", fields: [createdById], references: [id])
  modifiedBy   User?    @relation("POCModifiedBy", fields: [modifiedById], references: [id])

  // Database indexes for performance optimization
  @@index([companyId])
  @@index([email])
  @@index([firstName, lastName])
  @@index([designation])
  @@index([location])
  @@index([department])
  @@index([createdAt])
  @@map("pocs")
}

// ================================================================
// JOB POSTING STATUS MODEL
// ================================================================

model JobPostingStatus {
  id          String   @id @default(cuid())
  name        String   @unique
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  jobPostings JobPosting[]

  // Database indexes for performance optimization
  @@index([name])
  @@index([isActive])
  @@index([createdAt])
  @@map("job_posting_statuses")
}

// ================================================================
// JOB POSTING MODEL
// ================================================================

model JobPosting {
  id              String   @id @default(cuid())
  jobCode         String?  @unique @map("job_code")
  companyId       String   @map("company_id")
  title           String
  location        String
  jobLink         String?  @map("job_link")
  category        String
  experienceRange String   @map("experience_range")
  salaryRange     String   @map("salary_range")
  description     String   @db.Text
  sourceUrl       String?  @map("source_url")
  timeZone        String?  @map("time_zone")
  additionalNotes String?  @map("additional_notes") @db.Text
  createdBy       String   @map("created_by")
  modifiedBy      String?  @map("modified_by")
  bdmAssigned     String?  @map("bdm_assigned")
  statusId        String?  @map("status_id") // Foreign key to JobPostingStatus
  validation      Boolean  @default(false)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Foreign Keys
  createdById     String?  @map("created_by_id")
  modifiedById    String?  @map("modified_by_id")

  // Relations
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  status          JobPostingStatus? @relation(fields: [statusId], references: [id])
  createdByUser   User?             @relation("JobPostingCreatedBy", fields: [createdById], references: [id])
  modifiedByUser  User?             @relation("JobPostingModifiedBy", fields: [modifiedById], references: [id])
  jobs            Job[]

  // Database indexes for performance optimization
  @@index([companyId])
  @@index([statusId])
  @@index([validation])
  @@index([createdAt])
  @@index([category])
  @@index([location])
  @@index([bdmAssigned])
  @@map("job_postings")
}

// ================================================================
// JOB STATUS MODEL
// ================================================================

model JobStatus {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  jobs      Job[]

  // Database indexes for performance optimization
  @@index([name])
  @@index([slug])
  @@index([isActive])
  @@index([createdAt])
  @@map("job_statuses")
}

// ================================================================
// JOB MODEL
// ================================================================

model Job {
  id              String      @id @default(cuid())
  jobCode         String      @unique @map("job_code")
  title           String
  description     String?     @db.Text
  location        String?
  remoteType      String?     @map("remote_type")
  timeZone        String?     @map("time_zone")

  minSalary       Decimal?    @db.Decimal(12,2) @map("min_salary")
  maxSalary       Decimal?    @db.Decimal(12,2) @map("max_salary")
  salaryCurrency  String?     @map("salary_currency")
  salaryNotes     String?     @db.Text @map("salary_notes")
  feePercentage   Decimal?    @db.Decimal(5,2)  @map("fee_percentage")
  paymentTerms    String?     @map("payment_terms")

  relocationAssistance Boolean? @map("relocation_assistance")
  relocationDetails    String?  @db.Text @map("relocation_details")
  warrantyType     String?      @map("warranty_type")
  warrantyPeriodDays Int?       @map("warranty_period_days")

  skills           Json?        @map("skills_matrix")
  booleanSearch    String?      @map("boolean_search")
  tags             String[]     @map("tags")

  companyId        String       @map("company_id")
  jobPostingId     String?      @map("job_posting_id")
  statusId         String       @map("status_id")
  createdById      String       @map("created_by_id")
  modifiedById     String?      @map("modified_by_id")
  isActive         Boolean      @default(true) @map("is_active")

  postingMeta      Json?        @map("posting_meta")
  candidateCount   Int          @default(0) @map("candidate_count")
  notes            String?      @db.Text @map("notes")

  company          Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobPosting       JobPosting?  @relation(fields: [jobPostingId], references: [id])
  status           JobStatus    @relation(fields: [statusId], references: [id])
  createdBy        User         @relation("UserCreatedJobs", fields: [createdById], references: [id])
  modifiedBy       User?        @relation("UserModifiedJobs", fields: [modifiedById], references: [id])

  activities       JobActivity[]
  candidates       Candidate[]

  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  // Database indexes for performance optimization
  @@index([companyId])
  @@index([statusId])
  @@index([jobCode])
  @@index([title])
  @@index([location])
  @@index([remoteType])
  @@index([isActive])
  @@index([createdAt])
  @@index([jobPostingId])
  @@index([createdById])
  @@index([tags])
  @@map("jobs")
}

// ================================================================
// JOB ACTIVITY MODEL
// ================================================================

model JobActivity {
  id           String   @id @default(cuid())
  jobId        String   @map("job_id")
  activityType String   @map("activity_type")
  fromValue    String?  @map("from_value")
  toValue      String?  @map("to_value")
  notes        String?  @db.Text
  createdById  String   @map("created_by_id")
  createdAt    DateTime @default(now()) @map("created_at")

  job       Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdBy User @relation("UserJobActivities", fields: [createdById], references: [id])

  // Database indexes for performance optimization
  @@index([jobId])
  @@index([createdById])
  @@index([activityType])
  @@index([createdAt])
  @@map("job_activities")
}

// ================================================================
// CANDIDATE STAGE MODEL
// ================================================================

model CandidateStage {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  candidates Candidate[]

  // Database indexes for performance optimization
  @@index([name])
  @@index([slug])
  @@index([isActive])
  @@index([createdAt])
  @@map("candidate_stages")
}

// ================================================================
// CANDIDATE ACTIVITY MODEL
// ================================================================

model CandidateActivity {
  id           String   @id @default(cuid())
  candidateId  String   @map("candidate_id")
  activityType String   @map("activity_type")
  fromValue    String?  @map("from_value")
  toValue      String?  @map("to_value")
  notes        String?  @db.Text
  createdById  String   @map("created_by_id")
  createdAt    DateTime @default(now()) @map("created_at")

  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  createdBy   User      @relation("UserCandidateActivities", fields: [createdById], references: [id])

  // Database indexes for performance optimization
  @@index([candidateId])
  @@index([createdById])
  @@index([activityType])
  @@index([createdAt])
  @@map("candidate_activities")
}

// ================================================================
// CANDIDATE MODEL
// ================================================================

model Candidate {
  id              String   @id @default(cuid())
  jobId           String   @map("job_id")
  currentStageId  String   @map("stage_id")

  firstName       String   @map("first_name")
  lastName        String   @map("last_name")
  email           String?
  phone           String?
  location        String?

  isApplicant     Boolean  @default(false) @map("is_applicant")

  skills          String[] @map("skills")
  experienceYears Int?     @map("experience_years")
  availability    String?  @map("availability")
  expectedSalary  Decimal? @db.Decimal(12,2) @map("expected_salary")
  currentEmployer String?  @map("current_employer")
  employmentType  String?  @map("employment_type")

  certifications  String[] @map("certifications")

  resumeUrl       String?  @map("resume_url")
  linkedInUrl     String?  @map("linkedin_url")

  createdById     String   @map("created_by_id")
  modifiedById    String?  @map("modified_by_id")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  job             Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)
  currentStage    CandidateStage  @relation(fields: [currentStageId], references: [id])
  createdBy       User            @relation("UserCreatedCandidates", fields: [createdById], references: [id])
  modifiedBy      User?           @relation("UserModifiedCandidates", fields: [modifiedById], references: [id])
  activities      CandidateActivity[]
  education       Education[]

  // Database indexes for performance optimization
  @@index([jobId])
  @@index([currentStageId])
  @@index([firstName, lastName])
  @@index([email])
  @@index([phone])
  @@index([location])
  @@index([isApplicant])
  @@index([isActive])
  @@index([createdAt])
  @@index([createdById])
  @@index([skills])
  @@index([experienceYears])
  @@map("candidates")
}

// ================================================================
// EDUCATION MODEL
// ================================================================

model Education {
  id            String   @id @default(cuid())
  candidateId   String   @map("candidate_id")
  degree        String
  institution   String
  fieldOfStudy  String   @map("field_of_study")
  graduationYear Int?    @map("graduation_year")
  gpa           Decimal? @db.Decimal(3,2) @map("gpa")
  isCompleted   Boolean  @default(true) @map("is_completed")
  startYear     Int?     @map("start_year")
  endYear       Int?     @map("end_year")
  location      String?
  description   String?  @db.Text
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  candidate     Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  // Database indexes for performance optimization
  @@index([candidateId])
  @@index([institution])
  @@index([degree])
  @@index([fieldOfStudy])
  @@index([graduationYear])
  @@index([isCompleted])
  @@index([createdAt])
  @@map("education")
}