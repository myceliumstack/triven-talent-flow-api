// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================================================================
// USER MODEL
// ================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  password  String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  entityId  String?  @map("entity_id")

  // Relations
  entity     Entity?  @relation(fields: [entityId], references: [id])
  userRoles  UserRole[]
  
  // Created/Modified Relations
  createdCompanies     Company[]    @relation("CompanyCreatedBy")
  modifiedCompanies    Company[]    @relation("CompanyModifiedBy")
  createdPOCs          POC[]        @relation("POCCreatedBy")
  modifiedPOCs         POC[]        @relation("POCModifiedBy")
  createdJobPostings   JobPosting[] @relation("JobPostingCreatedBy")
  modifiedJobPostings  JobPosting[] @relation("JobPostingModifiedBy")
  createdJobs          Job[]        @relation("JobCreatedBy")
  modifiedJobs         Job[]        @relation("JobModifiedBy")
  createdCandidates    Candidate[]  @relation("CandidateCreatedBy")
  modifiedCandidates   Candidate[]  @relation("CandidateModifiedBy")
  
  // Activity Relations
  jobActivities        JobActivity[] @relation("JobActivityCreatedBy")
  candidateActivities  CandidateActivity[] @relation("CandidateActivityCreatedBy")
  
  // Assignment Relations
  assignedJobCandidateAssignments JobCandidateAssignment[] @relation("JobCandidateAssignmentAssignedBy")
  modifiedJobCandidateAssignments JobCandidateAssignment[] @relation("JobCandidateAssignmentModifiedBy")
  assignedJobPostingAssignments   JobPostingAssignment[] @relation("JobPostingAssignmentAssignedBy")
  assignedToJobPostingAssignments JobPostingAssignment[] @relation("JobPostingAssignmentAssignedTo")
  
  @@index([email])
  @@index([firstName, lastName])
  @@index([isActive])
  @@index([createdAt])
  @@map("users")
}

// ================================================================
// ROLE MODEL
// ================================================================

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  hierarchy   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  parentId    String?  @map("parent_id")
  department  String?
  
  // Self-referential hierarchy relationships
  parent      Role?    @relation("RoleHierarchy", fields: [parentId], references: [id])
  children    Role[]   @relation("RoleHierarchy")
  
  // Relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]
  
  @@index([hierarchy])
  @@index([parentId])
  @@index([department])
  @@map("roles")
}

// ================================================================
// PERMISSION MODEL
// ================================================================

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  resource    String
  action      String
  isActive    Boolean @default(true)
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  
  // Relations
  rolePermissions RolePermission[]
  
  @@index([resource])
  @@index([action])
  @@map("permissions")
}

// ================================================================
// USER ROLE MODEL
// ================================================================

model UserRole {
  id     String @id @default(cuid())
  userId String @map("userId")
  roleId String @map("roleId")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

// ================================================================
// ROLE PERMISSION MODEL
// ================================================================

model RolePermission {
  id           String @id @default(cuid())
  roleId       String @map("roleId")
  permissionId String @map("permissionId")
  
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// ================================================================
// ENTITY MODEL
// ================================================================

model Entity {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String   @unique
  type      String
  description String?
  location  String?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  users                User[]
  jobPostingAssignments JobPostingAssignment[]
  
  @@index([name])
  @@index([code])
  @@index([type])
  @@index([isActive])
  @@map("entities")
}

// ================================================================
// COMPANY MODEL
// ================================================================

model Company {
  id              String   @id @default(cuid())
  name            String
  website         String?
  industry        String
  location        String
  description     String?
  fee             Decimal? @db.Decimal(10, 2)
  paymentTerms    String?  @map("payment_terms")
  warranty        String?
  size            String
  agreementStatus String   @map("agreement_status")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdById     String?  @map("created_by_id")
  modifiedById    String?  @map("modified_by_id")
  
  // Relations
  createdBy  User?  @relation("CompanyCreatedBy", fields: [createdById], references: [id])
  modifiedBy User?  @relation("CompanyModifiedBy", fields: [modifiedById], references: [id])
  pocs       POC[]
  jobPostings JobPosting[]
  jobs       Job[]
  
  @@index([name])
  @@index([industry])
  @@index([location])
  @@index([size])
  @@index([agreementStatus])
  @@index([createdAt])
  @@index([createdById])
  @@map("companies")
}

// ================================================================
// POC MODEL
// ================================================================

model POC {
  id           String   @id @default(cuid())
  companyId    String   @map("company_id")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  email        String   @unique
  designation  String
  location     String
  phone        String?
  mobile       String?
  department   String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  createdById  String?  @map("created_by_id")
  modifiedById String?  @map("modified_by_id")
  
  // Relations
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy User?   @relation("POCCreatedBy", fields: [createdById], references: [id])
  modifiedBy User?  @relation("POCModifiedBy", fields: [modifiedById], references: [id])
  
  @@index([companyId])
  @@index([email])
  @@index([firstName, lastName])
  @@index([designation])
  @@index([location])
  @@index([department])
  @@index([createdAt])
  @@map("pocs")
}

// ================================================================
// JOB POSTING STATUS MODEL
// ================================================================

model JobPostingStatus {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  jobPostings         JobPosting[]
  jobPostingAssignments JobPostingAssignment[]
  
  @@index([name])
  @@index([isActive])
  @@index([createdAt])
  @@map("job_posting_statuses")
}

// ================================================================
// JOB POSTING MODEL
// ================================================================

model JobPosting {
  id               String   @id @default(cuid())
  companyId        String   @map("company_id")
  title            String
  location         String
  jobLink          String?  @map("job_link")
  category         String
  experienceRange  String   @map("experience_range")
  salaryRange      String   @map("salary_range")
  description      String
  sourceUrl        String?  @map("source_url")
  timeZone         String?  @map("time_zone")
  additionalNotes  String?  @map("additional_notes")
  createdBy        String   @map("created_by")
  modifiedBy       String?  @map("modified_by")
  bdmAssigned      String?  @map("bdm_assigned")
  validation       Boolean  @default(false)
  statusId         String?  @map("status_id")
  jobCode          String?  @unique @map("job_code")
  mailingTeam      String?  @map("mailing_team")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  createdById      String?  @map("created_by_id")
  modifiedById     String?  @map("modified_by_id")
  
  // Relations
  company              Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  status               JobPostingStatus?      @relation(fields: [statusId], references: [id])
  createdByUser        User?                  @relation("JobPostingCreatedBy", fields: [createdById], references: [id])
  modifiedByUser       User?                  @relation("JobPostingModifiedBy", fields: [modifiedById], references: [id])
  jobPostingAssignments JobPostingAssignment[]
  jobs                 Job[]
  
  @@index([companyId])
  @@index([title])
  @@index([location])
  @@index([category])
  @@index([bdmAssigned])
  @@index([validation])
  @@index([statusId])
  @@index([createdAt])
  @@map("job_postings")
}

// ================================================================
// JOB POSTING ASSIGNMENT MODEL
// ================================================================

model JobPostingAssignment {
  id            String   @id @default(cuid())
  jobPostingId  String   @map("job_posting_id")
  entityId      String   @map("entity_id")
  statusId      String   @map("status_id")
  assignedUserId String  @map("assigned_user_id")
  assignedById  String   @map("assigned_by_id")
  priority      String?  @default("normal")
  notes         String?
  assignedAt    DateTime @default(now()) @map("assigned_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  jobPosting JobPosting      @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  entity     Entity          @relation(fields: [entityId], references: [id])
  status     JobPostingStatus @relation(fields: [statusId], references: [id])
  assignedUser User          @relation("JobPostingAssignmentAssignedTo", fields: [assignedUserId], references: [id])
  assignedBy   User          @relation("JobPostingAssignmentAssignedBy", fields: [assignedById], references: [id])
  
  @@index([jobPostingId])
  @@index([entityId])
  @@index([statusId])
  @@index([assignedUserId])
  @@index([assignedById])
  @@index([assignedAt])
  @@index([priority])
  @@map("job_posting_assignments")
}

// ================================================================
// JOB STATUS MODEL
// ================================================================

model JobStatus {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  jobs Job[]
  
  @@index([name])
  @@index([slug])
  @@index([isActive])
  @@index([createdAt])
  @@map("job_statuses")
}

// ================================================================
// JOB MODEL
// ================================================================

model Job {
  id                    String   @id @default(cuid())
  jobCode               String   @unique @map("job_code")
  title                 String
  description           String?
  location              String?
  remoteType            String?  @map("remote_type")
  timeZone              String?  @map("time_zone")
  minSalary             Decimal? @db.Decimal(12, 2) @map("min_salary")
  maxSalary             Decimal? @db.Decimal(12, 2) @map("max_salary")
  salaryCurrency        String?  @map("salary_currency")
  salaryNotes           String?  @map("salary_notes")
  feePercentage         Decimal? @db.Decimal(5, 2) @map("fee_percentage")
  paymentTerms          String?  @map("payment_terms")
  relocationAssistance  Boolean? @map("relocation_assistance")
  relocationDetails     String?  @map("relocation_details")
  warrantyType          String?  @map("warranty_type")
  warrantyPeriodDays    Int?     @map("warranty_period_days")
  skillsMatrix          Json?    @map("skills_matrix")
  booleanSearch         String?  @map("boolean_search")
  tags                  String[]
  companyId             String   @map("company_id")
  jobPostingId          String?  @map("job_posting_id")
  statusId              String   @map("status_id")
  createdById           String   @map("created_by_id")
  modifiedById          String?  @map("modified_by_id")
  isActive              Boolean  @default(true) @map("is_active")
  postingMeta           Json?    @map("posting_meta")
  candidateCount        Int      @default(0) @map("candidate_count")
  notes                 String?
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  // Relations
  company                Company                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobPosting             JobPosting?             @relation(fields: [jobPostingId], references: [id])
  status                 JobStatus               @relation(fields: [statusId], references: [id])
  createdBy              User                    @relation("JobCreatedBy", fields: [createdById], references: [id])
  modifiedBy             User?                   @relation("JobModifiedBy", fields: [modifiedById], references: [id])
  jobActivities          JobActivity[]
  jobCandidateAssignments JobCandidateAssignment[]
  
  @@index([jobCode])
  @@index([title])
  @@index([location])
  @@index([remoteType])
  @@index([companyId])
  @@index([jobPostingId])
  @@index([statusId])
  @@index([createdById])
  @@index([isActive])
  @@index([tags])
  @@index([createdAt])
  @@map("jobs")
}

// ================================================================
// JOB ACTIVITY MODEL
// ================================================================

model JobActivity {
  id            String   @id @default(cuid())
  jobId         String   @map("job_id")
  activityType  String   @map("activity_type")
  fromValue     String?  @map("from_value")
  toValue       String?  @map("to_value")
  notes         String?
  createdById   String   @map("created_by_id")
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relations
  job       Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdBy User @relation("JobActivityCreatedBy", fields: [createdById], references: [id])
  
  @@index([jobId])
  @@index([activityType])
  @@index([createdById])
  @@index([createdAt])
  @@map("job_activities")
}

// ================================================================
// CANDIDATE STAGE MODEL
// ================================================================

model CandidateStage {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  jobCandidateAssignments JobCandidateAssignment[]
  
  @@index([name])
  @@index([slug])
  @@index([isActive])
  @@index([createdAt])
  @@map("candidate_stages")
}

// ================================================================
// CANDIDATE MODEL
// ================================================================

model Candidate {
  id                String   @id @default(cuid())
  firstName         String   @map("first_name")
  lastName          String   @map("last_name")
  email             String?
  phone             String?
  location          String?
  isApplicant       Boolean  @default(false) @map("is_applicant")
  skills            String[]
  experienceYears   Int?     @map("experience_years")
  availability      String?
  expectedSalary    Decimal? @db.Decimal(12, 2) @map("expected_salary")
  currentEmployer   String?  @map("current_employer")
  employmentType    String?  @map("employment_type")
  certifications    String[]
  resumeUrl         String?  @map("resume_url")
  linkedinUrl       String?  @map("linkedin_url")
  createdById       String   @map("created_by_id")
  modifiedById      String?  @map("modified_by_id")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  createdBy              User                    @relation("CandidateCreatedBy", fields: [createdById], references: [id])
  modifiedBy             User?                   @relation("CandidateModifiedBy", fields: [modifiedById], references: [id])
  candidateActivities    CandidateActivity[]
  education              Education[]
  jobCandidateAssignments JobCandidateAssignment[]
  
  @@index([firstName, lastName])
  @@index([email])
  @@index([phone])
  @@index([location])
  @@index([isApplicant])
  @@index([experienceYears])
  @@index([skills])
  @@index([isActive])
  @@index([createdById])
  @@index([createdAt])
  @@map("candidates")
}

// ================================================================
// CANDIDATE ACTIVITY MODEL
// ================================================================

model CandidateActivity {
  id                   String   @id @default(cuid())
  candidateId          String   @map("candidate_id")
  activityType         String   @map("activity_type")
  fromValue            String?  @map("from_value")
  toValue              String?  @map("to_value")
  notes                String?
  createdById          String   @map("created_by_id")
  jobAssignmentId      String?  @map("job_assignment_id")
  createdAt            DateTime @default(now()) @map("created_at")
  
  // Relations
  candidate        Candidate              @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  createdBy        User                   @relation("CandidateActivityCreatedBy", fields: [createdById], references: [id])
  jobAssignment    JobCandidateAssignment? @relation(fields: [jobAssignmentId], references: [id])
  
  @@index([candidateId])
  @@index([activityType])
  @@index([createdById])
  @@index([jobAssignmentId])
  @@index([createdAt])
  @@map("candidate_activities")
}

// ================================================================
// JOB CANDIDATE ASSIGNMENT MODEL
// ================================================================

model JobCandidateAssignment {
  id                String   @id @default(cuid())
  jobId             String   @map("job_id")
  candidateId       String   @map("candidate_id")
  stageId           String   @map("stage_id")
  status            String   @default("active")
  priority          String?  @default("normal")
  source            String?
  referralSource    String?  @map("referral_source")
  applicationDate   DateTime? @map("application_date")
  assignedDate      DateTime @default(now()) @map("assigned_date")
  lastActivityDate  DateTime @default(now()) @map("last_activity_date")
  notes             String?
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  assignedById      String   @map("assigned_by_id")
  modifiedById      String?  @map("modified_by_id")
  
  // Relations
  job                Job                   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidate          Candidate             @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  stage              CandidateStage        @relation(fields: [stageId], references: [id])
  assignedBy         User                  @relation("JobCandidateAssignmentAssignedBy", fields: [assignedById], references: [id])
  modifiedBy         User?                 @relation("JobCandidateAssignmentModifiedBy", fields: [modifiedById], references: [id])
  candidateActivities CandidateActivity[]
  
  @@unique([jobId, candidateId])
  @@index([jobId])
  @@index([candidateId])
  @@index([stageId])
  @@index([status])
  @@index([assignedById])
  @@index([assignedDate])
  @@index([lastActivityDate])
  @@index([isActive])
  @@map("job_candidate_assignments")
}

// ================================================================
// EDUCATION MODEL
// ================================================================

model Education {
  id              String   @id @default(cuid())
  candidateId     String   @map("candidate_id")
  degree          String
  institution     String
  fieldOfStudy    String   @map("field_of_study")
  graduationYear  Int?     @map("graduation_year")
  gpa             Decimal? @db.Decimal(3, 2)
  isCompleted     Boolean  @default(true) @map("is_completed")
  startYear       Int?     @map("start_year")
  endYear         Int?     @map("end_year")
  location        String?
  description     String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  
  @@index([candidateId])
  @@index([degree])
  @@index([institution])
  @@index([fieldOfStudy])
  @@index([graduationYear])
  @@index([isCompleted])
  @@index([createdAt])
  @@map("education")
}